#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 12 16:14:14 2024

@author: Vedang Narain (vedang.narain@msdtc.ox.ac.uk)

Make a violin plot of the oxygen distributions for different simulations.
"""

# =============================================================================
# LIBRARIES & INITIALISATION
# =============================================================================

# Initialise libraries
import pathlib
import matplotlib.colors
import matplotlib.pyplot as plt
import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import os
import pandas as pd
import seaborn as sns
import scipy
import time
import vtk
from vtk.util.numpy_support import vtk_to_numpy

# Import custom functions
from get_paraview_data import *
from convert_oxygen_units import convert_nM_to_mmHg

# Starts stopwatch to clock execution time
start_time = time.time()

# Set LaTeX-style font
from pathlib import Path
import matplotlib
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'
matplotlib.rcParams.update({'font.size': 12})
sns.set(font='STIXGeneral', font_scale=1.4)

# =============================================================================
# DATA
# =============================================================================

# Import the field data generated by different solvers
def get_oxygen(solver_name):

    field_path = '/home/narain/Desktop/Datasets/Violin Plots/TestVoronoiNetwork/' + solver_name + 'Haematocrit/Selection5/Kills0/oxygen_solution_0.vti'
    # field_path = '/scratch/narain/testoutput/TestDichotomousNetwork/' + solver_name + 'Haematocrit/Alpha1.1/oxygen_solution_0.vti'
    field_data, field_spacing = get_vti_data(field_path)  # import the data for the network
    flat_field = field_data['oxygen'].to_numpy().flatten()

    return flat_field

solver_list = ['Constant', 'Pries', 'Memory', 'Fung']

# Data 
constant_concentration = get_oxygen(solver_list[0])
pries_concentration = get_oxygen(solver_list[1])
memory_concentration = get_oxygen(solver_list[2])
fung_concentration = get_oxygen(solver_list[3])

# Combine the concentration data into a single dictionary
data = {
    'Constant': constant_concentration,
    'Pries': pries_concentration,
    'Memory': memory_concentration,
    'Fung': fung_concentration
}

# Convert the dictionary to a DataFrame
df = pd.DataFrame(data)

# Create the violin plot with KDE restricted to observed range
fig, ax1 = plt.subplots(figsize=(15, 8))

# Set the background of the plot to white
sns.set_style("white")  # White background, no grid lines
ax1.set_facecolor("white")  # Explicitly set the axes background to white
sns.violinplot(data=df, inner="quartiles", cut=0, bw=0.2, ax=ax1)  # Prevent extrapolation, adjust bandwidth

# Add shading below y=4500
hypoxia_patch = ax1.axhspan(0, 4500, facecolor='grey', alpha=0.5, label='hypoxia', zorder=0)  # Shade from y=0 to y=4500

# Explicitly set the y-axis limits to match the data range
ymin, ymax = 0, df.max().max() + 1000
ax1.set_ylim(ymin, ymax)  # No negative values, add some margin for clarity

# Add labels
ax1.set_xlabel('splitting rule', fontdict={'family': 'STIXGeneral'})
ax1.set_ylabel('oxygen concentration (nM)', fontdict={'family': 'STIXGeneral'})

# Add a legend
ax1.legend(loc='upper right', fontsize=12, prop={'family': 'STIXGeneral'})

# Create a secondary y-axis
ax2 = ax1.twinx()

# Set the limits of the secondary y-axis using the transformation function
ax2.set_ylim(convert_nM_to_mmHg(ymin), convert_nM_to_mmHg(ymax))

# Set tick font for the secondary y-axis
ax2.tick_params(axis='y', labelsize=16, labelrotation=0)
for label in ax2.get_yticklabels():
    label.set_fontsize(16)
    label.set_fontname('STIXGeneral')

# Add a label to the secondary axis
ax2.set_ylabel('oxygen partial pressure (mmHg)', fontdict={'family': 'STIXGeneral'})

# Ensure fonts are embedded correctly before saving
for ax in [ax1, ax2]:
    for tick in ax.get_yticklabels():
        tick.set_fontsize(16)
        tick.set_fontname('STIXGeneral')

# Show the plot
plt.show()

# Save image with consistent font sizes
file_path = Path('~/Desktop/Final Figures/hs_rules_violin_plot.png').expanduser()
fig.savefig(file_path, dpi=500, bbox_inches='tight', pad_inches=0.1)

# prints execution time
print("\n--- Execution Time: %s seconds ---" % (time.time() - start_time))
