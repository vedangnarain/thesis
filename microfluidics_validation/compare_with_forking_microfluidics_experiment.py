#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Feb 18 01:54:42 2022@author: Vedang Narain (vedang.narain@msdtc.ox.ac.uk)Four Generation Network AnalysisThis network plots the haematocrit distribution from a Chaste simulation tocompare it with the microchannel experiment of Hyakutake et al., Microvascular Research 140 (2022) 104281.Tested in Python 3.7.4."""# =============================================================================# LIBRARIES & INITIALISATION# =============================================================================# Initialise librariesimport matplotlib.pyplot as pltimport pandas as pdimport timefrom pathlib import Pathfrom matplotlib.pyplot import figurefrom scipy.stats import linregressfrom sklearn.metrics import mean_squared_error# Import tools for Paraview dataimport sysimport osparent_directory = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))sys.path.insert(0, parent_directory)from get_paraview_data import *# Set LaTex-style fontplt.rcParams['mathtext.fontset'] = 'stix'plt.rcParams['font.family'] = 'STIXGeneral'plt.rcParams.update({'font.size': 22})# Starts stopwatch to clock execution timestart_time = time.time()# =============================================================================# IMPORT EXPERIMENTAL DATA# =============================================================================# Read the experimental data#haematocrit = haematocrit_series.values[[60,0,8,9,24,25,20,21,56,57,52,53,48,49,44,45]]  # arrange the vessel values in line with the experimental paper# experimental_data = pd.read_excel('/Users/vedang/Documents/GitHub/dphil-scripts/pries_with_memory_solver/Fig7-9_data.xlsx', header=1, index_col=0)experimental_data = pd.read_excel('/scratch/narain/Microfluidics Network/Fig7-9_data.xlsx', header=1, index_col=0)standard_errors = [1, 2, 1.5, 3]'''# Plot a bar chartfig = plt.gcf()fig.set_size_inches(15,7.5)plt.title('Experimental Haematocrit Distribution')plt.errorbar(experimental_data.index, experimental_data['Hematocrit'], yerr=experimental_data.iloc[:,4],  fmt='o', capsize=5, linestyle='None', label='experiments')#plt.bar(range(len(means)), means, yerr=standard_errors, capsize=5)plt.ylabel(r'$H_T$')plt.ylim(0,0.4)plt.legend()plt.grid()plt.show()'''# =============================================================================# PLOT SIMULATION DATA# =============================================================================# Define a function to return the tube haematocrits in the right orderdef get_simulation_haematocrit(vtk_path):    # Extract the data    point_coordinates_data_array, point_data_array, cell_data_array, polydata = get_vtk_data(vtk_path)    default_simulation_haematocrit = cell_data_array['Vessel Haematocrit']        # Reaorder the vessel indices to match the experimental labelling of vessels    # experimental_indices = [60, 0, 8, 9, 24, 25, 20, 21, 56, 57, 52, 53, 48, 49, 44, 45]    experimental_indices = [0, 1, 3, 4, 7, 8, 9, 10, 30, 32, 34, 36, 38, 40, 42, 44]    simulation_haematocrit = [default_simulation_haematocrit[index] for index in experimental_indices]        return simulation_haematocrit# Pick the splitting rule of choicesplitting_rules = ['Constant', 'Pries', 'Memory', 'Fung']rule_index = 2omega_value = 28# solver_path = '/Users/vedang/Desktop/Manuscript 2/Microfluidics/Sims/constant flow rate 2/TestDichotomousNetwork/' + splitting_rules[rule_index] + 'Haematocrit/Alpha1.0/NoPruning/GridSpacingEquals0.0/FinalHaematocrit.vtp'# solver_path = '/Users/vedang/Desktop/Manuscript 2/Microfluidics/Sims (delete)/omegas/omega64/TestDichotomousNetwork/MemoryHaematocrit/Alpha1.0/NoPruning/GridSpacingEquals0.0/FinalHaematocrit.vtp'# solver_path = '/scratch/narain/Microfluidics Network/Dabbles/omegas/omega64/TestDichotomousNetwork/MemoryHaematocrit/Alpha1.0/NoPruning/GridSpacingEquals0.0/FinalHaematocrit.vtp'# solver_path = '/scratch/narain/Microfluidics Network/Hyakutake Network/TestHyakutakeMicrofluidicsNetworkOmega4/MemoryHaematocrit/Kills0/FinalHaematocrit.vtp'solver_path = '/tmp/narain/testoutput/TestHyakutakeMicrofluidicsNetwork/MemoryHaematocrit/Kills0/FinalHaematocrit.vtp'# solver_path = '/scratch/narain/Microfluidics Network/Hyakutake Network/TestHyakutakeMicrofluidicsNetworkOmega28/MemoryHaematocrit/Kills0/FinalHaematocrit.vtp'simulation_haematocrit = get_simulation_haematocrit(solver_path)# Plot MSE chartsplt.figure()fig = plt.gcf()fig.set_size_inches(15,7.5)plt.title(r'Haematocrit Distribution ($\omega$ = ' + str(omega_value) +')')#tubes = ['P', 'A1', 'B1', 'B2', 'C1', 'C2', 'C3', 'C4', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8']plt.errorbar(experimental_data.index, experimental_data['Hematocrit'], yerr=experimental_data.iloc[:,4],  fmt='o', capsize=5, linestyle='None', label='experiments')plt.scatter(experimental_data.index, simulation_haematocrit, marker='x', s=50, c='red', label='model')# plt.ylabel(r'$H_T$')plt.ylabel('vessel haematocrit')plt.xlabel('vessel ID')plt.ylim(0)# plt.ylim(0.12,0.2)plt.legend()plt.grid()figure_title = 'forking_solvers'file_path = Path('~/Desktop/Final Figures/' + figure_title + '.png').expanduser()plt.savefig(file_path, dpi=500)plt.show()# =============================================================================# PLOT R2# =============================================================================# Plot the dataplt.figure(figsize=(10,10))min_val = 0max_val = 0.5plt.plot([min_val, max_val], [min_val, max_val], '--' , color='black')plt.xlim(min_val,max_val) plt.ylim(min_val,max_val)plt.xlabel('experiment')plt.ylabel('simulation')slope, intercept, r_value, p_value, std_err = linregress(experimental_data['Hematocrit'],simulation_haematocrit)plt.scatter(experimental_data['Hematocrit'],simulation_haematocrit, label=f'replication (r = {r_value:.2f}, r_sq = {r_value**2:.2f}, m = {slope:.2f})', marker='x', c='g', alpha=0.7)plt.title('Tube haematocrit with in vitro viscosity')plt.legend()# =============================================================================# PLOT MEMORY SOLVER WITH VARIOUS OMEGAS# ============================================================================='''# Specify the different omega valuesomegas = [2, 4, 8, 16, 28, 64, 128, 256, 512, 1024]# Obtain the MSEs for each omegamse_list = []for omega in omegas:        # omega_path = '/Users/vedang/Desktop/Manuscript 2/Microfluidics/Sims/omegas/omega' + str(omega) + '/TestDichotomousNetwork/MemoryHaematocrit/Alpha1.0/NoPruning/GridSpacingEquals0.0/FinalHaematocrit.vtp'    omega_path = '/scratch/narain/Microfluidics Network/Dabbles/omegas/omega' + str(omega) + '/TestDichotomousNetwork/MemoryHaematocrit/Alpha1.0/NoPruning/GridSpacingEquals0.0/FinalHaematocrit.vtp'    omega_haematocrit = get_simulation_haematocrit(omega_path)        mse = mean_squared_error(experimental_data['Hematocrit'], omega_haematocrit)#    print(mse)    mse_list.append(mse)# Plot the MSEplt.figure()fig = plt.gcf()fig.set_size_inches(15,7.5)plt.plot(omegas, mse_list, marker='o', markersize=10, lw=5)for i in range(len(omegas)):    plt.text(omegas[i], mse_list[i], str(omegas[i]), va='bottom')plt.xlabel(r'$\omega$')plt.ylabel('MSE (network haematocrit)')# plt.xlim(0)plt.ylim(0)plt.xscale('log')#plt.title('Mean Squared Error')plt.grid()plt.show()'''# =============================================================================# PLOT MEMORY SOLVER AS A TEST# =============================================================================# Save image#figure_title = 'microfluidics'# file_path = Path('~/Desktop/Final Figures/' + figure_title + '.svg').expanduser()# fig.savefig(file_path, dpi=500, bbox_inches = 'tight')#file_path = Path('~/Desktop/Final Figures/' + figure_title + '.png').expanduser()#fig.savefig(file_path, dpi=500, bbox_inches = 'tight')# prints execution timeprint("\n--- Execution Time: %s seconds ---" % (time.time() - start_time))